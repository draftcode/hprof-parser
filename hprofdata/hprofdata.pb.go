// Code generated by protoc-gen-go. DO NOT EDIT.
// source: hprofdata/hprofdata.proto

package hprofdata

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Data type in the hprof format. Values are encoded in the big endian.
type HProfValueType int32

const (
	HProfValueType_UNKNOWN_HPROF_VALUE_TYPE HProfValueType = 0
	// Object. The value of this type is an object_id of HProfInstanceDump,
	// array_object_id of HProfObjectArrayDump or HProfPrimitiveArrayDump,
	// or class_object_id of HProfClassDump.
	//
	// The value is basically a pointer and its size is defined in the hprof
	// header, which is typically 4 bytes for 32-bit JVM hprof dumps or 8 bytes
	// for 64-bit JVM hprof dumps.
	HProfValueType_OBJECT HProfValueType = 2
	// Boolean. Takes 0 or 1. One byte.
	HProfValueType_BOOLEAN HProfValueType = 4
	// Character. Two bytes.
	HProfValueType_CHAR HProfValueType = 5
	// Float. 4 bytes
	HProfValueType_FLOAT HProfValueType = 6
	// Double. 8 bytes.
	HProfValueType_DOUBLE HProfValueType = 7
	// Byte. One byte.
	HProfValueType_BYTE HProfValueType = 8
	// Short. Two bytes.
	HProfValueType_SHORT HProfValueType = 9
	// Integer. 4 bytes.
	HProfValueType_INT HProfValueType = 10
	// Long. 8 bytes.
	HProfValueType_LONG HProfValueType = 11
)

var HProfValueType_name = map[int32]string{
	0:  "UNKNOWN_HPROF_VALUE_TYPE",
	2:  "OBJECT",
	4:  "BOOLEAN",
	5:  "CHAR",
	6:  "FLOAT",
	7:  "DOUBLE",
	8:  "BYTE",
	9:  "SHORT",
	10: "INT",
	11: "LONG",
}

var HProfValueType_value = map[string]int32{
	"UNKNOWN_HPROF_VALUE_TYPE": 0,
	"OBJECT":                   2,
	"BOOLEAN":                  4,
	"CHAR":                     5,
	"FLOAT":                    6,
	"DOUBLE":                   7,
	"BYTE":                     8,
	"SHORT":                    9,
	"INT":                      10,
	"LONG":                     11,
}

func (x HProfValueType) String() string {
	return proto.EnumName(HProfValueType_name, int32(x))
}

func (HProfValueType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_368480752cf852f0, []int{0}
}

// UTF-8 byte sequence record.
//
// Even though it says UTF-8, its content might not be a valid UTF-8 sequence.
type HProfRecordUTF8 struct {
	// ID of the record.
	NameId uint64 `protobuf:"varint,1,opt,name=name_id,json=nameId,proto3" json:"name_id,omitempty"`
	// UTF-8 byte sequence.
	Name                 []byte   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HProfRecordUTF8) Reset()         { *m = HProfRecordUTF8{} }
func (m *HProfRecordUTF8) String() string { return proto.CompactTextString(m) }
func (*HProfRecordUTF8) ProtoMessage()    {}
func (*HProfRecordUTF8) Descriptor() ([]byte, []int) {
	return fileDescriptor_368480752cf852f0, []int{0}
}

func (m *HProfRecordUTF8) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HProfRecordUTF8.Unmarshal(m, b)
}
func (m *HProfRecordUTF8) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HProfRecordUTF8.Marshal(b, m, deterministic)
}
func (m *HProfRecordUTF8) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HProfRecordUTF8.Merge(m, src)
}
func (m *HProfRecordUTF8) XXX_Size() int {
	return xxx_messageInfo_HProfRecordUTF8.Size(m)
}
func (m *HProfRecordUTF8) XXX_DiscardUnknown() {
	xxx_messageInfo_HProfRecordUTF8.DiscardUnknown(m)
}

var xxx_messageInfo_HProfRecordUTF8 proto.InternalMessageInfo

func (m *HProfRecordUTF8) GetNameId() uint64 {
	if m != nil {
		return m.NameId
	}
	return 0
}

func (m *HProfRecordUTF8) GetName() []byte {
	if m != nil {
		return m.Name
	}
	return nil
}

// Load class record.
type HProfRecordLoadClass struct {
	// Class serial number.
	ClassSerialNumber uint32 `protobuf:"varint,1,opt,name=class_serial_number,json=classSerialNumber,proto3" json:"class_serial_number,omitempty"`
	// Class object ID, associated with HProfClassDump.
	ClassObjectId uint64 `protobuf:"varint,2,opt,name=class_object_id,json=classObjectId,proto3" json:"class_object_id,omitempty"`
	// Stack trace serial number. Mostly unused unless the class is dynamically
	// created and loaded with a custom class loader?
	StackTraceSerialNumber uint32 `protobuf:"varint,3,opt,name=stack_trace_serial_number,json=stackTraceSerialNumber,proto3" json:"stack_trace_serial_number,omitempty"`
	// Class name, associated with HProfRecordUTF8.
	ClassNameId          uint64   `protobuf:"varint,4,opt,name=class_name_id,json=classNameId,proto3" json:"class_name_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HProfRecordLoadClass) Reset()         { *m = HProfRecordLoadClass{} }
func (m *HProfRecordLoadClass) String() string { return proto.CompactTextString(m) }
func (*HProfRecordLoadClass) ProtoMessage()    {}
func (*HProfRecordLoadClass) Descriptor() ([]byte, []int) {
	return fileDescriptor_368480752cf852f0, []int{1}
}

func (m *HProfRecordLoadClass) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HProfRecordLoadClass.Unmarshal(m, b)
}
func (m *HProfRecordLoadClass) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HProfRecordLoadClass.Marshal(b, m, deterministic)
}
func (m *HProfRecordLoadClass) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HProfRecordLoadClass.Merge(m, src)
}
func (m *HProfRecordLoadClass) XXX_Size() int {
	return xxx_messageInfo_HProfRecordLoadClass.Size(m)
}
func (m *HProfRecordLoadClass) XXX_DiscardUnknown() {
	xxx_messageInfo_HProfRecordLoadClass.DiscardUnknown(m)
}

var xxx_messageInfo_HProfRecordLoadClass proto.InternalMessageInfo

func (m *HProfRecordLoadClass) GetClassSerialNumber() uint32 {
	if m != nil {
		return m.ClassSerialNumber
	}
	return 0
}

func (m *HProfRecordLoadClass) GetClassObjectId() uint64 {
	if m != nil {
		return m.ClassObjectId
	}
	return 0
}

func (m *HProfRecordLoadClass) GetStackTraceSerialNumber() uint32 {
	if m != nil {
		return m.StackTraceSerialNumber
	}
	return 0
}

func (m *HProfRecordLoadClass) GetClassNameId() uint64 {
	if m != nil {
		return m.ClassNameId
	}
	return 0
}

// Stack frame record.
type HProfRecordFrame struct {
	// Stack frame ID.
	StackFrameId uint64 `protobuf:"varint,1,opt,name=stack_frame_id,json=stackFrameId,proto3" json:"stack_frame_id,omitempty"`
	// Method name, associated with HProfRecordUTF8.
	MethodNameId uint64 `protobuf:"varint,2,opt,name=method_name_id,json=methodNameId,proto3" json:"method_name_id,omitempty"`
	// Method signature, associated with HProfRecordUTF8.
	MethodSignatureId uint64 `protobuf:"varint,3,opt,name=method_signature_id,json=methodSignatureId,proto3" json:"method_signature_id,omitempty"`
	// Source file name, associated with HProfRecordUTF8.
	SourceFileNameId uint64 `protobuf:"varint,4,opt,name=source_file_name_id,json=sourceFileNameId,proto3" json:"source_file_name_id,omitempty"`
	// Class serial number, associated with HProfRecordLoadClass.
	ClassSerialNumber uint32 `protobuf:"varint,5,opt,name=class_serial_number,json=classSerialNumber,proto3" json:"class_serial_number,omitempty"`
	// Line number if available.
	LineNumber           int32    `protobuf:"varint,6,opt,name=line_number,json=lineNumber,proto3" json:"line_number,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HProfRecordFrame) Reset()         { *m = HProfRecordFrame{} }
func (m *HProfRecordFrame) String() string { return proto.CompactTextString(m) }
func (*HProfRecordFrame) ProtoMessage()    {}
func (*HProfRecordFrame) Descriptor() ([]byte, []int) {
	return fileDescriptor_368480752cf852f0, []int{2}
}

func (m *HProfRecordFrame) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HProfRecordFrame.Unmarshal(m, b)
}
func (m *HProfRecordFrame) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HProfRecordFrame.Marshal(b, m, deterministic)
}
func (m *HProfRecordFrame) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HProfRecordFrame.Merge(m, src)
}
func (m *HProfRecordFrame) XXX_Size() int {
	return xxx_messageInfo_HProfRecordFrame.Size(m)
}
func (m *HProfRecordFrame) XXX_DiscardUnknown() {
	xxx_messageInfo_HProfRecordFrame.DiscardUnknown(m)
}

var xxx_messageInfo_HProfRecordFrame proto.InternalMessageInfo

func (m *HProfRecordFrame) GetStackFrameId() uint64 {
	if m != nil {
		return m.StackFrameId
	}
	return 0
}

func (m *HProfRecordFrame) GetMethodNameId() uint64 {
	if m != nil {
		return m.MethodNameId
	}
	return 0
}

func (m *HProfRecordFrame) GetMethodSignatureId() uint64 {
	if m != nil {
		return m.MethodSignatureId
	}
	return 0
}

func (m *HProfRecordFrame) GetSourceFileNameId() uint64 {
	if m != nil {
		return m.SourceFileNameId
	}
	return 0
}

func (m *HProfRecordFrame) GetClassSerialNumber() uint32 {
	if m != nil {
		return m.ClassSerialNumber
	}
	return 0
}

func (m *HProfRecordFrame) GetLineNumber() int32 {
	if m != nil {
		return m.LineNumber
	}
	return 0
}

// Stack trace record.
type HProfRecordTrace struct {
	// Stack trace serial number.
	StackTraceSerialNumber uint32 `protobuf:"varint,1,opt,name=stack_trace_serial_number,json=stackTraceSerialNumber,proto3" json:"stack_trace_serial_number,omitempty"`
	// Thread serial number.
	ThreadSerialNumber uint32 `protobuf:"varint,2,opt,name=thread_serial_number,json=threadSerialNumber,proto3" json:"thread_serial_number,omitempty"`
	// Stack frame IDs, associated with HProfRecordFrame.
	StackFrameIds        []uint64 `protobuf:"varint,3,rep,packed,name=stack_frame_ids,json=stackFrameIds,proto3" json:"stack_frame_ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HProfRecordTrace) Reset()         { *m = HProfRecordTrace{} }
func (m *HProfRecordTrace) String() string { return proto.CompactTextString(m) }
func (*HProfRecordTrace) ProtoMessage()    {}
func (*HProfRecordTrace) Descriptor() ([]byte, []int) {
	return fileDescriptor_368480752cf852f0, []int{3}
}

func (m *HProfRecordTrace) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HProfRecordTrace.Unmarshal(m, b)
}
func (m *HProfRecordTrace) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HProfRecordTrace.Marshal(b, m, deterministic)
}
func (m *HProfRecordTrace) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HProfRecordTrace.Merge(m, src)
}
func (m *HProfRecordTrace) XXX_Size() int {
	return xxx_messageInfo_HProfRecordTrace.Size(m)
}
func (m *HProfRecordTrace) XXX_DiscardUnknown() {
	xxx_messageInfo_HProfRecordTrace.DiscardUnknown(m)
}

var xxx_messageInfo_HProfRecordTrace proto.InternalMessageInfo

func (m *HProfRecordTrace) GetStackTraceSerialNumber() uint32 {
	if m != nil {
		return m.StackTraceSerialNumber
	}
	return 0
}

func (m *HProfRecordTrace) GetThreadSerialNumber() uint32 {
	if m != nil {
		return m.ThreadSerialNumber
	}
	return 0
}

func (m *HProfRecordTrace) GetStackFrameIds() []uint64 {
	if m != nil {
		return m.StackFrameIds
	}
	return nil
}

// Start and end of heap dump sections.
type HProfRecordHeapDumpBoundary struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HProfRecordHeapDumpBoundary) Reset()         { *m = HProfRecordHeapDumpBoundary{} }
func (m *HProfRecordHeapDumpBoundary) String() string { return proto.CompactTextString(m) }
func (*HProfRecordHeapDumpBoundary) ProtoMessage()    {}
func (*HProfRecordHeapDumpBoundary) Descriptor() ([]byte, []int) {
	return fileDescriptor_368480752cf852f0, []int{4}
}

func (m *HProfRecordHeapDumpBoundary) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HProfRecordHeapDumpBoundary.Unmarshal(m, b)
}
func (m *HProfRecordHeapDumpBoundary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HProfRecordHeapDumpBoundary.Marshal(b, m, deterministic)
}
func (m *HProfRecordHeapDumpBoundary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HProfRecordHeapDumpBoundary.Merge(m, src)
}
func (m *HProfRecordHeapDumpBoundary) XXX_Size() int {
	return xxx_messageInfo_HProfRecordHeapDumpBoundary.Size(m)
}
func (m *HProfRecordHeapDumpBoundary) XXX_DiscardUnknown() {
	xxx_messageInfo_HProfRecordHeapDumpBoundary.DiscardUnknown(m)
}

var xxx_messageInfo_HProfRecordHeapDumpBoundary proto.InternalMessageInfo

// Class data dump.
type HProfClassDump struct {
	// Class object ID.
	ClassObjectId uint64 `protobuf:"varint,1,opt,name=class_object_id,json=classObjectId,proto3" json:"class_object_id,omitempty"`
	// Stack trace serial number.
	StackTraceSerialNumber uint32 `protobuf:"varint,2,opt,name=stack_trace_serial_number,json=stackTraceSerialNumber,proto3" json:"stack_trace_serial_number,omitempty"`
	// Super class object ID, associated with another HProfClassDump.
	SuperClassObjectId uint64 `protobuf:"varint,3,opt,name=super_class_object_id,json=superClassObjectId,proto3" json:"super_class_object_id,omitempty"`
	// Class loader object ID, associated with HProfInstanceDump.
	ClassLoaderObjectId uint64 `protobuf:"varint,4,opt,name=class_loader_object_id,json=classLoaderObjectId,proto3" json:"class_loader_object_id,omitempty"`
	// Signer of the class. (Looks like ClassLoaders can have signatures...)
	SignersObjectId uint64 `protobuf:"varint,5,opt,name=signers_object_id,json=signersObjectId,proto3" json:"signers_object_id,omitempty"`
	// Protection domain object ID. (No idea)
	ProtectionDomainObjectId uint64 `protobuf:"varint,6,opt,name=protection_domain_object_id,json=protectionDomainObjectId,proto3" json:"protection_domain_object_id,omitempty"`
	// Instance size.
	InstanceSize         uint32                              `protobuf:"varint,7,opt,name=instance_size,json=instanceSize,proto3" json:"instance_size,omitempty"`
	ConstantPoolEntries  []*HProfClassDump_ConstantPoolEntry `protobuf:"bytes,8,rep,name=constant_pool_entries,json=constantPoolEntries,proto3" json:"constant_pool_entries,omitempty"`
	StaticFields         []*HProfClassDump_StaticField       `protobuf:"bytes,9,rep,name=static_fields,json=staticFields,proto3" json:"static_fields,omitempty"`
	InstanceFields       []*HProfClassDump_InstanceField     `protobuf:"bytes,10,rep,name=instance_fields,json=instanceFields,proto3" json:"instance_fields,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                            `json:"-"`
	XXX_unrecognized     []byte                              `json:"-"`
	XXX_sizecache        int32                               `json:"-"`
}

func (m *HProfClassDump) Reset()         { *m = HProfClassDump{} }
func (m *HProfClassDump) String() string { return proto.CompactTextString(m) }
func (*HProfClassDump) ProtoMessage()    {}
func (*HProfClassDump) Descriptor() ([]byte, []int) {
	return fileDescriptor_368480752cf852f0, []int{5}
}

func (m *HProfClassDump) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HProfClassDump.Unmarshal(m, b)
}
func (m *HProfClassDump) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HProfClassDump.Marshal(b, m, deterministic)
}
func (m *HProfClassDump) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HProfClassDump.Merge(m, src)
}
func (m *HProfClassDump) XXX_Size() int {
	return xxx_messageInfo_HProfClassDump.Size(m)
}
func (m *HProfClassDump) XXX_DiscardUnknown() {
	xxx_messageInfo_HProfClassDump.DiscardUnknown(m)
}

var xxx_messageInfo_HProfClassDump proto.InternalMessageInfo

func (m *HProfClassDump) GetClassObjectId() uint64 {
	if m != nil {
		return m.ClassObjectId
	}
	return 0
}

func (m *HProfClassDump) GetStackTraceSerialNumber() uint32 {
	if m != nil {
		return m.StackTraceSerialNumber
	}
	return 0
}

func (m *HProfClassDump) GetSuperClassObjectId() uint64 {
	if m != nil {
		return m.SuperClassObjectId
	}
	return 0
}

func (m *HProfClassDump) GetClassLoaderObjectId() uint64 {
	if m != nil {
		return m.ClassLoaderObjectId
	}
	return 0
}

func (m *HProfClassDump) GetSignersObjectId() uint64 {
	if m != nil {
		return m.SignersObjectId
	}
	return 0
}

func (m *HProfClassDump) GetProtectionDomainObjectId() uint64 {
	if m != nil {
		return m.ProtectionDomainObjectId
	}
	return 0
}

func (m *HProfClassDump) GetInstanceSize() uint32 {
	if m != nil {
		return m.InstanceSize
	}
	return 0
}

func (m *HProfClassDump) GetConstantPoolEntries() []*HProfClassDump_ConstantPoolEntry {
	if m != nil {
		return m.ConstantPoolEntries
	}
	return nil
}

func (m *HProfClassDump) GetStaticFields() []*HProfClassDump_StaticField {
	if m != nil {
		return m.StaticFields
	}
	return nil
}

func (m *HProfClassDump) GetInstanceFields() []*HProfClassDump_InstanceField {
	if m != nil {
		return m.InstanceFields
	}
	return nil
}

// Constant pool entry (appears to be unused according to heapDumper.cpp).
type HProfClassDump_ConstantPoolEntry struct {
	Type                 HProfValueType `protobuf:"varint,1,opt,name=type,proto3,enum=hprofdata.HProfValueType" json:"type,omitempty"`
	Value                uint64         `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *HProfClassDump_ConstantPoolEntry) Reset()         { *m = HProfClassDump_ConstantPoolEntry{} }
func (m *HProfClassDump_ConstantPoolEntry) String() string { return proto.CompactTextString(m) }
func (*HProfClassDump_ConstantPoolEntry) ProtoMessage()    {}
func (*HProfClassDump_ConstantPoolEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_368480752cf852f0, []int{5, 0}
}

func (m *HProfClassDump_ConstantPoolEntry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HProfClassDump_ConstantPoolEntry.Unmarshal(m, b)
}
func (m *HProfClassDump_ConstantPoolEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HProfClassDump_ConstantPoolEntry.Marshal(b, m, deterministic)
}
func (m *HProfClassDump_ConstantPoolEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HProfClassDump_ConstantPoolEntry.Merge(m, src)
}
func (m *HProfClassDump_ConstantPoolEntry) XXX_Size() int {
	return xxx_messageInfo_HProfClassDump_ConstantPoolEntry.Size(m)
}
func (m *HProfClassDump_ConstantPoolEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_HProfClassDump_ConstantPoolEntry.DiscardUnknown(m)
}

var xxx_messageInfo_HProfClassDump_ConstantPoolEntry proto.InternalMessageInfo

func (m *HProfClassDump_ConstantPoolEntry) GetType() HProfValueType {
	if m != nil {
		return m.Type
	}
	return HProfValueType_UNKNOWN_HPROF_VALUE_TYPE
}

func (m *HProfClassDump_ConstantPoolEntry) GetValue() uint64 {
	if m != nil {
		return m.Value
	}
	return 0
}

// Static fields.
type HProfClassDump_StaticField struct {
	// Static field name, associated with HProfRecordUTF8.
	NameId uint64 `protobuf:"varint,1,opt,name=name_id,json=nameId,proto3" json:"name_id,omitempty"`
	// Type of the static field.
	Type HProfValueType `protobuf:"varint,2,opt,name=type,proto3,enum=hprofdata.HProfValueType" json:"type,omitempty"`
	// Value of the static field. Must be interpreted based on the type.
	Value                uint64   `protobuf:"varint,3,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HProfClassDump_StaticField) Reset()         { *m = HProfClassDump_StaticField{} }
func (m *HProfClassDump_StaticField) String() string { return proto.CompactTextString(m) }
func (*HProfClassDump_StaticField) ProtoMessage()    {}
func (*HProfClassDump_StaticField) Descriptor() ([]byte, []int) {
	return fileDescriptor_368480752cf852f0, []int{5, 1}
}

func (m *HProfClassDump_StaticField) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HProfClassDump_StaticField.Unmarshal(m, b)
}
func (m *HProfClassDump_StaticField) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HProfClassDump_StaticField.Marshal(b, m, deterministic)
}
func (m *HProfClassDump_StaticField) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HProfClassDump_StaticField.Merge(m, src)
}
func (m *HProfClassDump_StaticField) XXX_Size() int {
	return xxx_messageInfo_HProfClassDump_StaticField.Size(m)
}
func (m *HProfClassDump_StaticField) XXX_DiscardUnknown() {
	xxx_messageInfo_HProfClassDump_StaticField.DiscardUnknown(m)
}

var xxx_messageInfo_HProfClassDump_StaticField proto.InternalMessageInfo

func (m *HProfClassDump_StaticField) GetNameId() uint64 {
	if m != nil {
		return m.NameId
	}
	return 0
}

func (m *HProfClassDump_StaticField) GetType() HProfValueType {
	if m != nil {
		return m.Type
	}
	return HProfValueType_UNKNOWN_HPROF_VALUE_TYPE
}

func (m *HProfClassDump_StaticField) GetValue() uint64 {
	if m != nil {
		return m.Value
	}
	return 0
}

// Instance fields.
type HProfClassDump_InstanceField struct {
	// Instance field name, associated with HProfRecordUTF8.
	NameId uint64 `protobuf:"varint,1,opt,name=name_id,json=nameId,proto3" json:"name_id,omitempty"`
	// Type of the instance field.
	Type                 HProfValueType `protobuf:"varint,2,opt,name=type,proto3,enum=hprofdata.HProfValueType" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *HProfClassDump_InstanceField) Reset()         { *m = HProfClassDump_InstanceField{} }
func (m *HProfClassDump_InstanceField) String() string { return proto.CompactTextString(m) }
func (*HProfClassDump_InstanceField) ProtoMessage()    {}
func (*HProfClassDump_InstanceField) Descriptor() ([]byte, []int) {
	return fileDescriptor_368480752cf852f0, []int{5, 2}
}

func (m *HProfClassDump_InstanceField) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HProfClassDump_InstanceField.Unmarshal(m, b)
}
func (m *HProfClassDump_InstanceField) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HProfClassDump_InstanceField.Marshal(b, m, deterministic)
}
func (m *HProfClassDump_InstanceField) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HProfClassDump_InstanceField.Merge(m, src)
}
func (m *HProfClassDump_InstanceField) XXX_Size() int {
	return xxx_messageInfo_HProfClassDump_InstanceField.Size(m)
}
func (m *HProfClassDump_InstanceField) XXX_DiscardUnknown() {
	xxx_messageInfo_HProfClassDump_InstanceField.DiscardUnknown(m)
}

var xxx_messageInfo_HProfClassDump_InstanceField proto.InternalMessageInfo

func (m *HProfClassDump_InstanceField) GetNameId() uint64 {
	if m != nil {
		return m.NameId
	}
	return 0
}

func (m *HProfClassDump_InstanceField) GetType() HProfValueType {
	if m != nil {
		return m.Type
	}
	return HProfValueType_UNKNOWN_HPROF_VALUE_TYPE
}

// Instance dump.
type HProfInstanceDump struct {
	// Object ID.
	ObjectId uint64 `protobuf:"varint,1,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	// Stack trace serial number.
	StackTraceSerialNumber uint32 `protobuf:"varint,2,opt,name=stack_trace_serial_number,json=stackTraceSerialNumber,proto3" json:"stack_trace_serial_number,omitempty"`
	// Class object ID, associated with HProfClassDump.
	ClassObjectId uint64 `protobuf:"varint,3,opt,name=class_object_id,json=classObjectId,proto3" json:"class_object_id,omitempty"`
	// Instance field values.
	//
	// The instance field values are serialized in the order of the instance field
	// definition of HProfClassDump. If the class has three int fields, this
	// values starts from three 4-byte integers. Then, it continues to the super
	// class's instance fields.
	Values               []byte   `protobuf:"bytes,4,opt,name=values,proto3" json:"values,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HProfInstanceDump) Reset()         { *m = HProfInstanceDump{} }
func (m *HProfInstanceDump) String() string { return proto.CompactTextString(m) }
func (*HProfInstanceDump) ProtoMessage()    {}
func (*HProfInstanceDump) Descriptor() ([]byte, []int) {
	return fileDescriptor_368480752cf852f0, []int{6}
}

func (m *HProfInstanceDump) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HProfInstanceDump.Unmarshal(m, b)
}
func (m *HProfInstanceDump) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HProfInstanceDump.Marshal(b, m, deterministic)
}
func (m *HProfInstanceDump) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HProfInstanceDump.Merge(m, src)
}
func (m *HProfInstanceDump) XXX_Size() int {
	return xxx_messageInfo_HProfInstanceDump.Size(m)
}
func (m *HProfInstanceDump) XXX_DiscardUnknown() {
	xxx_messageInfo_HProfInstanceDump.DiscardUnknown(m)
}

var xxx_messageInfo_HProfInstanceDump proto.InternalMessageInfo

func (m *HProfInstanceDump) GetObjectId() uint64 {
	if m != nil {
		return m.ObjectId
	}
	return 0
}

func (m *HProfInstanceDump) GetStackTraceSerialNumber() uint32 {
	if m != nil {
		return m.StackTraceSerialNumber
	}
	return 0
}

func (m *HProfInstanceDump) GetClassObjectId() uint64 {
	if m != nil {
		return m.ClassObjectId
	}
	return 0
}

func (m *HProfInstanceDump) GetValues() []byte {
	if m != nil {
		return m.Values
	}
	return nil
}

// Object array dump.
type HProfObjectArrayDump struct {
	// Object ID.
	ArrayObjectId uint64 `protobuf:"varint,1,opt,name=array_object_id,json=arrayObjectId,proto3" json:"array_object_id,omitempty"`
	// Stack trace serial number.
	StackTraceSerialNumber uint32 `protobuf:"varint,2,opt,name=stack_trace_serial_number,json=stackTraceSerialNumber,proto3" json:"stack_trace_serial_number,omitempty"`
	// Class object ID of the array elements, associated with HProfClassDump.
	ArrayClassObjectId uint64 `protobuf:"varint,3,opt,name=array_class_object_id,json=arrayClassObjectId,proto3" json:"array_class_object_id,omitempty"`
	// Element object IDs.
	ElementObjectIds     []uint64 `protobuf:"varint,4,rep,packed,name=element_object_ids,json=elementObjectIds,proto3" json:"element_object_ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HProfObjectArrayDump) Reset()         { *m = HProfObjectArrayDump{} }
func (m *HProfObjectArrayDump) String() string { return proto.CompactTextString(m) }
func (*HProfObjectArrayDump) ProtoMessage()    {}
func (*HProfObjectArrayDump) Descriptor() ([]byte, []int) {
	return fileDescriptor_368480752cf852f0, []int{7}
}

func (m *HProfObjectArrayDump) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HProfObjectArrayDump.Unmarshal(m, b)
}
func (m *HProfObjectArrayDump) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HProfObjectArrayDump.Marshal(b, m, deterministic)
}
func (m *HProfObjectArrayDump) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HProfObjectArrayDump.Merge(m, src)
}
func (m *HProfObjectArrayDump) XXX_Size() int {
	return xxx_messageInfo_HProfObjectArrayDump.Size(m)
}
func (m *HProfObjectArrayDump) XXX_DiscardUnknown() {
	xxx_messageInfo_HProfObjectArrayDump.DiscardUnknown(m)
}

var xxx_messageInfo_HProfObjectArrayDump proto.InternalMessageInfo

func (m *HProfObjectArrayDump) GetArrayObjectId() uint64 {
	if m != nil {
		return m.ArrayObjectId
	}
	return 0
}

func (m *HProfObjectArrayDump) GetStackTraceSerialNumber() uint32 {
	if m != nil {
		return m.StackTraceSerialNumber
	}
	return 0
}

func (m *HProfObjectArrayDump) GetArrayClassObjectId() uint64 {
	if m != nil {
		return m.ArrayClassObjectId
	}
	return 0
}

func (m *HProfObjectArrayDump) GetElementObjectIds() []uint64 {
	if m != nil {
		return m.ElementObjectIds
	}
	return nil
}

// Primitive array dump.
type HProfPrimitiveArrayDump struct {
	// Object ID.
	ArrayObjectId uint64 `protobuf:"varint,1,opt,name=array_object_id,json=arrayObjectId,proto3" json:"array_object_id,omitempty"`
	// Stack trace serial number.
	StackTraceSerialNumber uint32 `protobuf:"varint,2,opt,name=stack_trace_serial_number,json=stackTraceSerialNumber,proto3" json:"stack_trace_serial_number,omitempty"`
	// Type of the elements.
	ElementType HProfValueType `protobuf:"varint,3,opt,name=element_type,json=elementType,proto3,enum=hprofdata.HProfValueType" json:"element_type,omitempty"`
	// Element values.
	//
	// Values need to be parsed based on the element_type. If the array is an int
	// array with three elements, this field has 12 bytes.
	Values               []byte   `protobuf:"bytes,4,opt,name=values,proto3" json:"values,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HProfPrimitiveArrayDump) Reset()         { *m = HProfPrimitiveArrayDump{} }
func (m *HProfPrimitiveArrayDump) String() string { return proto.CompactTextString(m) }
func (*HProfPrimitiveArrayDump) ProtoMessage()    {}
func (*HProfPrimitiveArrayDump) Descriptor() ([]byte, []int) {
	return fileDescriptor_368480752cf852f0, []int{8}
}

func (m *HProfPrimitiveArrayDump) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HProfPrimitiveArrayDump.Unmarshal(m, b)
}
func (m *HProfPrimitiveArrayDump) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HProfPrimitiveArrayDump.Marshal(b, m, deterministic)
}
func (m *HProfPrimitiveArrayDump) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HProfPrimitiveArrayDump.Merge(m, src)
}
func (m *HProfPrimitiveArrayDump) XXX_Size() int {
	return xxx_messageInfo_HProfPrimitiveArrayDump.Size(m)
}
func (m *HProfPrimitiveArrayDump) XXX_DiscardUnknown() {
	xxx_messageInfo_HProfPrimitiveArrayDump.DiscardUnknown(m)
}

var xxx_messageInfo_HProfPrimitiveArrayDump proto.InternalMessageInfo

func (m *HProfPrimitiveArrayDump) GetArrayObjectId() uint64 {
	if m != nil {
		return m.ArrayObjectId
	}
	return 0
}

func (m *HProfPrimitiveArrayDump) GetStackTraceSerialNumber() uint32 {
	if m != nil {
		return m.StackTraceSerialNumber
	}
	return 0
}

func (m *HProfPrimitiveArrayDump) GetElementType() HProfValueType {
	if m != nil {
		return m.ElementType
	}
	return HProfValueType_UNKNOWN_HPROF_VALUE_TYPE
}

func (m *HProfPrimitiveArrayDump) GetValues() []byte {
	if m != nil {
		return m.Values
	}
	return nil
}

// Root object pointer of JNI globals.
type HProfRootJNIGlobal struct {
	// Object ID.
	ObjectId uint64 `protobuf:"varint,1,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	// JNI global ref ID. (No idea)
	JniGlobalRefId       uint64   `protobuf:"varint,2,opt,name=jni_global_ref_id,json=jniGlobalRefId,proto3" json:"jni_global_ref_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HProfRootJNIGlobal) Reset()         { *m = HProfRootJNIGlobal{} }
func (m *HProfRootJNIGlobal) String() string { return proto.CompactTextString(m) }
func (*HProfRootJNIGlobal) ProtoMessage()    {}
func (*HProfRootJNIGlobal) Descriptor() ([]byte, []int) {
	return fileDescriptor_368480752cf852f0, []int{9}
}

func (m *HProfRootJNIGlobal) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HProfRootJNIGlobal.Unmarshal(m, b)
}
func (m *HProfRootJNIGlobal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HProfRootJNIGlobal.Marshal(b, m, deterministic)
}
func (m *HProfRootJNIGlobal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HProfRootJNIGlobal.Merge(m, src)
}
func (m *HProfRootJNIGlobal) XXX_Size() int {
	return xxx_messageInfo_HProfRootJNIGlobal.Size(m)
}
func (m *HProfRootJNIGlobal) XXX_DiscardUnknown() {
	xxx_messageInfo_HProfRootJNIGlobal.DiscardUnknown(m)
}

var xxx_messageInfo_HProfRootJNIGlobal proto.InternalMessageInfo

func (m *HProfRootJNIGlobal) GetObjectId() uint64 {
	if m != nil {
		return m.ObjectId
	}
	return 0
}

func (m *HProfRootJNIGlobal) GetJniGlobalRefId() uint64 {
	if m != nil {
		return m.JniGlobalRefId
	}
	return 0
}

// Root object pointer of JNI locals.
type HProfRootJNILocal struct {
	// Object ID.
	ObjectId uint64 `protobuf:"varint,1,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	// Thread serial number.
	ThreadSerialNumber uint32 `protobuf:"varint,2,opt,name=thread_serial_number,json=threadSerialNumber,proto3" json:"thread_serial_number,omitempty"`
	// Frame number in the trace.
	FrameNumberInStackTrace uint32   `protobuf:"varint,3,opt,name=frame_number_in_stack_trace,json=frameNumberInStackTrace,proto3" json:"frame_number_in_stack_trace,omitempty"`
	XXX_NoUnkeyedLiteral    struct{} `json:"-"`
	XXX_unrecognized        []byte   `json:"-"`
	XXX_sizecache           int32    `json:"-"`
}

func (m *HProfRootJNILocal) Reset()         { *m = HProfRootJNILocal{} }
func (m *HProfRootJNILocal) String() string { return proto.CompactTextString(m) }
func (*HProfRootJNILocal) ProtoMessage()    {}
func (*HProfRootJNILocal) Descriptor() ([]byte, []int) {
	return fileDescriptor_368480752cf852f0, []int{10}
}

func (m *HProfRootJNILocal) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HProfRootJNILocal.Unmarshal(m, b)
}
func (m *HProfRootJNILocal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HProfRootJNILocal.Marshal(b, m, deterministic)
}
func (m *HProfRootJNILocal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HProfRootJNILocal.Merge(m, src)
}
func (m *HProfRootJNILocal) XXX_Size() int {
	return xxx_messageInfo_HProfRootJNILocal.Size(m)
}
func (m *HProfRootJNILocal) XXX_DiscardUnknown() {
	xxx_messageInfo_HProfRootJNILocal.DiscardUnknown(m)
}

var xxx_messageInfo_HProfRootJNILocal proto.InternalMessageInfo

func (m *HProfRootJNILocal) GetObjectId() uint64 {
	if m != nil {
		return m.ObjectId
	}
	return 0
}

func (m *HProfRootJNILocal) GetThreadSerialNumber() uint32 {
	if m != nil {
		return m.ThreadSerialNumber
	}
	return 0
}

func (m *HProfRootJNILocal) GetFrameNumberInStackTrace() uint32 {
	if m != nil {
		return m.FrameNumberInStackTrace
	}
	return 0
}

// Root object pointer on JVM stack (e.g. local variables).
type HProfRootJavaFrame struct {
	// Object ID.
	ObjectId uint64 `protobuf:"varint,1,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	// Thread serial number.
	ThreadSerialNumber uint32 `protobuf:"varint,2,opt,name=thread_serial_number,json=threadSerialNumber,proto3" json:"thread_serial_number,omitempty"`
	// Frame number in the trace.
	FrameNumberInStackTrace uint32   `protobuf:"varint,3,opt,name=frame_number_in_stack_trace,json=frameNumberInStackTrace,proto3" json:"frame_number_in_stack_trace,omitempty"`
	XXX_NoUnkeyedLiteral    struct{} `json:"-"`
	XXX_unrecognized        []byte   `json:"-"`
	XXX_sizecache           int32    `json:"-"`
}

func (m *HProfRootJavaFrame) Reset()         { *m = HProfRootJavaFrame{} }
func (m *HProfRootJavaFrame) String() string { return proto.CompactTextString(m) }
func (*HProfRootJavaFrame) ProtoMessage()    {}
func (*HProfRootJavaFrame) Descriptor() ([]byte, []int) {
	return fileDescriptor_368480752cf852f0, []int{11}
}

func (m *HProfRootJavaFrame) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HProfRootJavaFrame.Unmarshal(m, b)
}
func (m *HProfRootJavaFrame) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HProfRootJavaFrame.Marshal(b, m, deterministic)
}
func (m *HProfRootJavaFrame) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HProfRootJavaFrame.Merge(m, src)
}
func (m *HProfRootJavaFrame) XXX_Size() int {
	return xxx_messageInfo_HProfRootJavaFrame.Size(m)
}
func (m *HProfRootJavaFrame) XXX_DiscardUnknown() {
	xxx_messageInfo_HProfRootJavaFrame.DiscardUnknown(m)
}

var xxx_messageInfo_HProfRootJavaFrame proto.InternalMessageInfo

func (m *HProfRootJavaFrame) GetObjectId() uint64 {
	if m != nil {
		return m.ObjectId
	}
	return 0
}

func (m *HProfRootJavaFrame) GetThreadSerialNumber() uint32 {
	if m != nil {
		return m.ThreadSerialNumber
	}
	return 0
}

func (m *HProfRootJavaFrame) GetFrameNumberInStackTrace() uint32 {
	if m != nil {
		return m.FrameNumberInStackTrace
	}
	return 0
}

// System classes (No idea).
type HProfRootStickyClass struct {
	// Object ID.
	ObjectId             uint64   `protobuf:"varint,1,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HProfRootStickyClass) Reset()         { *m = HProfRootStickyClass{} }
func (m *HProfRootStickyClass) String() string { return proto.CompactTextString(m) }
func (*HProfRootStickyClass) ProtoMessage()    {}
func (*HProfRootStickyClass) Descriptor() ([]byte, []int) {
	return fileDescriptor_368480752cf852f0, []int{12}
}

func (m *HProfRootStickyClass) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HProfRootStickyClass.Unmarshal(m, b)
}
func (m *HProfRootStickyClass) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HProfRootStickyClass.Marshal(b, m, deterministic)
}
func (m *HProfRootStickyClass) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HProfRootStickyClass.Merge(m, src)
}
func (m *HProfRootStickyClass) XXX_Size() int {
	return xxx_messageInfo_HProfRootStickyClass.Size(m)
}
func (m *HProfRootStickyClass) XXX_DiscardUnknown() {
	xxx_messageInfo_HProfRootStickyClass.DiscardUnknown(m)
}

var xxx_messageInfo_HProfRootStickyClass proto.InternalMessageInfo

func (m *HProfRootStickyClass) GetObjectId() uint64 {
	if m != nil {
		return m.ObjectId
	}
	return 0
}

// Thread object.
type HProfRootThreadObj struct {
	// Object ID.
	ThreadObjectId uint64 `protobuf:"varint,1,opt,name=thread_object_id,json=threadObjectId,proto3" json:"thread_object_id,omitempty"`
	// Thread sequence number. (It seems this is same as thread serial number.)
	ThreadSequenceNumber uint32 `protobuf:"varint,2,opt,name=thread_sequence_number,json=threadSequenceNumber,proto3" json:"thread_sequence_number,omitempty"`
	// Stack trace serial number.
	StackTraceSequenceNumber uint32   `protobuf:"varint,3,opt,name=stack_trace_sequence_number,json=stackTraceSequenceNumber,proto3" json:"stack_trace_sequence_number,omitempty"`
	XXX_NoUnkeyedLiteral     struct{} `json:"-"`
	XXX_unrecognized         []byte   `json:"-"`
	XXX_sizecache            int32    `json:"-"`
}

func (m *HProfRootThreadObj) Reset()         { *m = HProfRootThreadObj{} }
func (m *HProfRootThreadObj) String() string { return proto.CompactTextString(m) }
func (*HProfRootThreadObj) ProtoMessage()    {}
func (*HProfRootThreadObj) Descriptor() ([]byte, []int) {
	return fileDescriptor_368480752cf852f0, []int{13}
}

func (m *HProfRootThreadObj) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HProfRootThreadObj.Unmarshal(m, b)
}
func (m *HProfRootThreadObj) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HProfRootThreadObj.Marshal(b, m, deterministic)
}
func (m *HProfRootThreadObj) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HProfRootThreadObj.Merge(m, src)
}
func (m *HProfRootThreadObj) XXX_Size() int {
	return xxx_messageInfo_HProfRootThreadObj.Size(m)
}
func (m *HProfRootThreadObj) XXX_DiscardUnknown() {
	xxx_messageInfo_HProfRootThreadObj.DiscardUnknown(m)
}

var xxx_messageInfo_HProfRootThreadObj proto.InternalMessageInfo

func (m *HProfRootThreadObj) GetThreadObjectId() uint64 {
	if m != nil {
		return m.ThreadObjectId
	}
	return 0
}

func (m *HProfRootThreadObj) GetThreadSequenceNumber() uint32 {
	if m != nil {
		return m.ThreadSequenceNumber
	}
	return 0
}

func (m *HProfRootThreadObj) GetStackTraceSequenceNumber() uint32 {
	if m != nil {
		return m.StackTraceSequenceNumber
	}
	return 0
}

// Busy monitor.
type HProfRootMonitorUsed struct {
	// Object ID.
	ObjectId             uint64   `protobuf:"varint,1,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HProfRootMonitorUsed) Reset()         { *m = HProfRootMonitorUsed{} }
func (m *HProfRootMonitorUsed) String() string { return proto.CompactTextString(m) }
func (*HProfRootMonitorUsed) ProtoMessage()    {}
func (*HProfRootMonitorUsed) Descriptor() ([]byte, []int) {
	return fileDescriptor_368480752cf852f0, []int{14}
}

func (m *HProfRootMonitorUsed) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HProfRootMonitorUsed.Unmarshal(m, b)
}
func (m *HProfRootMonitorUsed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HProfRootMonitorUsed.Marshal(b, m, deterministic)
}
func (m *HProfRootMonitorUsed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HProfRootMonitorUsed.Merge(m, src)
}
func (m *HProfRootMonitorUsed) XXX_Size() int {
	return xxx_messageInfo_HProfRootMonitorUsed.Size(m)
}
func (m *HProfRootMonitorUsed) XXX_DiscardUnknown() {
	xxx_messageInfo_HProfRootMonitorUsed.DiscardUnknown(m)
}

var xxx_messageInfo_HProfRootMonitorUsed proto.InternalMessageInfo

func (m *HProfRootMonitorUsed) GetObjectId() uint64 {
	if m != nil {
		return m.ObjectId
	}
	return 0
}

func init() {
	proto.RegisterEnum("hprofdata.HProfValueType", HProfValueType_name, HProfValueType_value)
	proto.RegisterType((*HProfRecordUTF8)(nil), "hprofdata.HProfRecordUTF8")
	proto.RegisterType((*HProfRecordLoadClass)(nil), "hprofdata.HProfRecordLoadClass")
	proto.RegisterType((*HProfRecordFrame)(nil), "hprofdata.HProfRecordFrame")
	proto.RegisterType((*HProfRecordTrace)(nil), "hprofdata.HProfRecordTrace")
	proto.RegisterType((*HProfRecordHeapDumpBoundary)(nil), "hprofdata.HProfRecordHeapDumpBoundary")
	proto.RegisterType((*HProfClassDump)(nil), "hprofdata.HProfClassDump")
	proto.RegisterType((*HProfClassDump_ConstantPoolEntry)(nil), "hprofdata.HProfClassDump.ConstantPoolEntry")
	proto.RegisterType((*HProfClassDump_StaticField)(nil), "hprofdata.HProfClassDump.StaticField")
	proto.RegisterType((*HProfClassDump_InstanceField)(nil), "hprofdata.HProfClassDump.InstanceField")
	proto.RegisterType((*HProfInstanceDump)(nil), "hprofdata.HProfInstanceDump")
	proto.RegisterType((*HProfObjectArrayDump)(nil), "hprofdata.HProfObjectArrayDump")
	proto.RegisterType((*HProfPrimitiveArrayDump)(nil), "hprofdata.HProfPrimitiveArrayDump")
	proto.RegisterType((*HProfRootJNIGlobal)(nil), "hprofdata.HProfRootJNIGlobal")
	proto.RegisterType((*HProfRootJNILocal)(nil), "hprofdata.HProfRootJNILocal")
	proto.RegisterType((*HProfRootJavaFrame)(nil), "hprofdata.HProfRootJavaFrame")
	proto.RegisterType((*HProfRootStickyClass)(nil), "hprofdata.HProfRootStickyClass")
	proto.RegisterType((*HProfRootThreadObj)(nil), "hprofdata.HProfRootThreadObj")
	proto.RegisterType((*HProfRootMonitorUsed)(nil), "hprofdata.HProfRootMonitorUsed")
}

func init() { proto.RegisterFile("hprofdata/hprofdata.proto", fileDescriptor_368480752cf852f0) }

var fileDescriptor_368480752cf852f0 = []byte{
	// 1107 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x57, 0xdd, 0x6e, 0xe3, 0x44,
	0x14, 0xc6, 0xf9, 0x6d, 0x4f, 0xd2, 0xd4, 0x99, 0x76, 0xdb, 0x74, 0x0b, 0xa2, 0x32, 0x7f, 0x65,
	0x61, 0x0b, 0x6c, 0xb9, 0x00, 0x69, 0x17, 0xa9, 0x3f, 0xc9, 0x36, 0x25, 0x24, 0x91, 0x93, 0xee,
	0xb2, 0x12, 0x92, 0xe5, 0xda, 0x93, 0xed, 0xb4, 0x8e, 0x27, 0x8c, 0x9d, 0x4a, 0xdd, 0x47, 0xe0,
	0x02, 0xf1, 0x08, 0x70, 0xc5, 0x05, 0x97, 0x3c, 0x07, 0x37, 0x5c, 0xf2, 0x34, 0x68, 0xce, 0xd8,
	0xa9, 0x9d, 0x6d, 0xb2, 0xaa, 0x54, 0x21, 0xee, 0x32, 0xe7, 0x7c, 0xe7, 0x3b, 0xf3, 0x9d, 0x39,
	0x73, 0xc6, 0x81, 0x8d, 0xb3, 0x91, 0xe0, 0x03, 0xd7, 0x0e, 0xed, 0xcf, 0x26, 0xbf, 0x76, 0x46,
	0x82, 0x87, 0x9c, 0x2c, 0x4e, 0x0c, 0xc6, 0x37, 0xb0, 0x7c, 0xd4, 0x15, 0x7c, 0x60, 0x52, 0x87,
	0x0b, 0xf7, 0xa4, 0xdf, 0xf8, 0x8a, 0xac, 0x43, 0xd1, 0xb7, 0x87, 0xd4, 0x62, 0x6e, 0x4d, 0xdb,
	0xd2, 0xb6, 0x73, 0x66, 0x41, 0x2e, 0x9b, 0x2e, 0x21, 0x90, 0x93, 0xbf, 0x6a, 0x99, 0x2d, 0x6d,
	0xbb, 0x6c, 0xe2, 0x6f, 0xe3, 0x2f, 0x0d, 0x56, 0x13, 0x04, 0x2d, 0x6e, 0xbb, 0x07, 0x9e, 0x1d,
	0x04, 0x64, 0x07, 0x56, 0x1c, 0xf9, 0xc3, 0x0a, 0xa8, 0x60, 0xb6, 0x67, 0xf9, 0xe3, 0xe1, 0x29,
	0x15, 0xc8, 0xb8, 0x64, 0x56, 0xd1, 0xd5, 0x43, 0x4f, 0x1b, 0x1d, 0xe4, 0x43, 0x58, 0x56, 0x78,
	0x7e, 0x7a, 0x4e, 0x9d, 0x50, 0x66, 0xcf, 0x60, 0xf6, 0x25, 0x34, 0x77, 0xd0, 0xda, 0x74, 0xc9,
	0xd7, 0xb0, 0x11, 0x84, 0xb6, 0x73, 0x61, 0x85, 0xc2, 0x76, 0xe8, 0x14, 0x7b, 0x16, 0xd9, 0xd7,
	0x10, 0xd0, 0x97, 0xfe, 0x54, 0x0a, 0x03, 0x14, 0x97, 0x15, 0xcb, 0xcb, 0x61, 0x82, 0x12, 0x1a,
	0xdb, 0xa8, 0xd1, 0xf8, 0x39, 0x03, 0x7a, 0x42, 0x4f, 0x43, 0xd8, 0x43, 0x4a, 0xde, 0x87, 0x8a,
	0xca, 0x39, 0x10, 0xa9, 0xc2, 0x94, 0xd1, 0x8a, 0x98, 0xa6, 0x2b, 0x51, 0x43, 0x1a, 0x9e, 0x71,
	0x77, 0xc2, 0xaf, 0x04, 0x94, 0x95, 0x55, 0x25, 0x90, 0x75, 0x89, 0x50, 0x01, 0x7b, 0xe9, 0xdb,
	0xe1, 0x58, 0x20, 0x34, 0x8b, 0xd0, 0xaa, 0x72, 0xf5, 0x62, 0x4f, 0xd3, 0x25, 0x0f, 0x61, 0x25,
	0xe0, 0x63, 0xe1, 0x50, 0x6b, 0xc0, 0x3c, 0x3a, 0xb5, 0x75, 0x5d, 0xb9, 0x1a, 0xcc, 0xa3, 0xd7,
	0xf4, 0x37, 0x95, 0x3d, 0x3f, 0xab, 0xec, 0xef, 0x42, 0xc9, 0x63, 0x3e, 0x8d, 0x71, 0x85, 0x2d,
	0x6d, 0x3b, 0x6f, 0x82, 0x34, 0x29, 0x80, 0xf1, 0xbb, 0x96, 0x2a, 0x08, 0x56, 0x75, 0xfe, 0x21,
	0x68, 0x73, 0x0f, 0xe1, 0x73, 0x58, 0x0d, 0xcf, 0x04, 0xb5, 0xdd, 0xa9, 0xa8, 0x0c, 0x46, 0x11,
	0xe5, 0x9b, 0xee, 0x8c, 0x74, 0xf5, 0x83, 0x5a, 0x76, 0x2b, 0x2b, 0x3b, 0x23, 0x59, 0xfe, 0xc0,
	0x78, 0x07, 0x36, 0x13, 0x1b, 0x3d, 0xa2, 0xf6, 0xe8, 0x70, 0x3c, 0x1c, 0xed, 0xf3, 0xb1, 0xef,
	0xda, 0xe2, 0xca, 0xf8, 0xa9, 0x08, 0x15, 0xf4, 0x63, 0x7f, 0x4a, 0xd7, 0x4d, 0x3d, 0xa7, 0xdd,
	0xba, 0xe7, 0x32, 0x73, 0xe5, 0x7e, 0x01, 0xf7, 0x82, 0xf1, 0x88, 0x0a, 0x6b, 0x3a, 0x91, 0x3a,
	0x70, 0x82, 0xce, 0x83, 0x54, 0xb6, 0x5d, 0x58, 0x53, 0x60, 0x8f, 0xdb, 0x2e, 0x15, 0x89, 0x18,
	0x75, 0xe8, 0xea, 0x80, 0x5b, 0xe8, 0x9c, 0x04, 0x3d, 0x80, 0xaa, 0xec, 0x27, 0x2a, 0x92, 0x39,
	0xf2, 0x88, 0x5f, 0x8e, 0x1c, 0x13, 0xec, 0x13, 0xd8, 0x94, 0x73, 0x80, 0x3a, 0x21, 0xe3, 0xbe,
	0xe5, 0xf2, 0xa1, 0xcd, 0xfc, 0x44, 0x54, 0x01, 0xa3, 0x6a, 0xd7, 0x90, 0x43, 0x44, 0x4c, 0xc2,
	0xdf, 0x83, 0x25, 0xe6, 0x07, 0xa1, 0xed, 0xcb, 0x52, 0xb0, 0x57, 0xb4, 0x56, 0xc4, 0x0a, 0x94,
	0x63, 0x63, 0x8f, 0xbd, 0xa2, 0xc4, 0x82, 0x7b, 0x0e, 0x47, 0x43, 0x68, 0x8d, 0x38, 0xf7, 0x2c,
	0xea, 0x87, 0x82, 0xd1, 0xa0, 0xb6, 0xb0, 0x95, 0xdd, 0x2e, 0x3d, 0xfa, 0x64, 0xe7, 0x7a, 0x26,
	0xa5, 0x0f, 0x65, 0xe7, 0x20, 0x0a, 0xeb, 0x72, 0xee, 0xd5, 0xfd, 0x50, 0x5c, 0x99, 0x2b, 0xce,
	0x94, 0x89, 0xd1, 0x80, 0x1c, 0x83, 0x3c, 0xfe, 0x90, 0x39, 0xd6, 0x80, 0x51, 0xcf, 0x0d, 0x6a,
	0x8b, 0x48, 0xfc, 0xc1, 0x6c, 0xe2, 0x1e, 0xc2, 0x1b, 0x12, 0x8d, 0x37, 0x37, 0x5e, 0x04, 0xa4,
	0x0b, 0xcb, 0x13, 0x45, 0x11, 0x1b, 0x20, 0xdb, 0x47, 0xb3, 0xd9, 0x9a, 0x51, 0x80, 0xe2, 0xab,
	0xb0, 0xe4, 0x32, 0xb8, 0xff, 0x3d, 0x54, 0x5f, 0xd3, 0x41, 0x1e, 0x42, 0x2e, 0xbc, 0x1a, 0x51,
	0xec, 0xb1, 0xca, 0xa3, 0x8d, 0x69, 0xee, 0x67, 0xb6, 0x37, 0xa6, 0xfd, 0xab, 0x11, 0x35, 0x11,
	0x46, 0x56, 0x21, 0x7f, 0x29, 0x4d, 0xd1, 0x18, 0x51, 0x8b, 0xfb, 0x17, 0x50, 0x4a, 0x08, 0x99,
	0x3d, 0xac, 0xe3, 0x64, 0x99, 0x5b, 0x26, 0xcb, 0x26, 0x93, 0x3d, 0x87, 0xa5, 0x94, 0xce, 0xbb,
	0x4a, 0x67, 0xfc, 0xa1, 0x41, 0x15, 0x1d, 0x31, 0x3d, 0xde, 0xc7, 0x4d, 0x58, 0x9c, 0xbe, 0x89,
	0x0b, 0xfc, 0x0e, 0x2e, 0xe1, 0x0d, 0xf7, 0x3c, 0x7b, 0xd3, 0x3d, 0x5f, 0x83, 0x02, 0xea, 0x0e,
	0xf0, 0xa6, 0x95, 0xcd, 0x68, 0x65, 0xfc, 0x13, 0x3f, 0x72, 0x0a, 0xb9, 0x27, 0x84, 0x7d, 0x15,
	0x0f, 0x10, 0x5b, 0x2e, 0x5e, 0x1f, 0x20, 0x68, 0xbe, 0xa3, 0x01, 0xa2, 0x52, 0xcc, 0x18, 0x20,
	0xe8, 0x4c, 0x0f, 0x90, 0x4f, 0x81, 0x50, 0x8f, 0x0e, 0xa9, 0x1f, 0x5e, 0xc3, 0xa5, 0x24, 0x39,
	0x33, 0xf5, 0xc8, 0x13, 0x83, 0x03, 0xe3, 0x6f, 0x0d, 0xd6, 0x51, 0x5c, 0x57, 0xb0, 0x21, 0x0b,
	0xd9, 0x25, 0xfd, 0x4f, 0xf5, 0x3d, 0x86, 0x72, 0xbc, 0x59, 0x6c, 0xa0, 0xec, 0x9b, 0x1a, 0xa8,
	0x14, 0xc1, 0xe5, 0x62, 0xe6, 0x89, 0xfd, 0x00, 0x44, 0xbd, 0x05, 0x9c, 0x87, 0xc7, 0xed, 0xe6,
	0x53, 0x8f, 0x9f, 0xda, 0xde, 0xfc, 0xfe, 0xfa, 0x18, 0xaa, 0xe7, 0x3e, 0xb3, 0x5e, 0x22, 0xd4,
	0x12, 0x74, 0x70, 0xfd, 0x82, 0x57, 0xce, 0x7d, 0xa6, 0x28, 0x4c, 0x3a, 0x68, 0xba, 0xc6, 0xaf,
	0x71, 0xf7, 0x46, 0xf4, 0x2d, 0xee, 0xbc, 0x89, 0xfd, 0xf6, 0xcf, 0xde, 0x63, 0xd8, 0x54, 0x0f,
	0x9e, 0x42, 0x5a, 0xcc, 0xb7, 0x12, 0x35, 0x8e, 0x3e, 0x75, 0xd6, 0x11, 0xa2, 0x22, 0x9a, 0x7e,
	0x6f, 0x52, 0x62, 0xe3, 0x37, 0x2d, 0x59, 0x01, 0xfb, 0xd2, 0x56, 0x5f, 0x32, 0xff, 0xab, 0x3d,
	0xee, 0xc6, 0x9f, 0x8e, 0x9c, 0x87, 0xbd, 0x90, 0x39, 0x17, 0xaa, 0x8f, 0xe7, 0x6e, 0xd2, 0xf8,
	0x33, 0x29, 0xac, 0x8f, 0x5b, 0xea, 0x9c, 0x9e, 0x93, 0x6d, 0xd0, 0xa3, 0xbd, 0x4f, 0x87, 0x56,
	0xc2, 0x18, 0xa4, 0x54, 0x7e, 0x09, 0x6b, 0x13, 0x95, 0x3f, 0x8e, 0xa9, 0x9c, 0xf9, 0x29, 0x9d,
	0xab, 0xb1, 0x4e, 0xe5, 0x8c, 0x94, 0x3e, 0x81, 0xcd, 0x74, 0x87, 0xa7, 0x43, 0x95, 0xd2, 0x5a,
	0xb2, 0xc7, 0x93, 0xe1, 0x29, 0xa9, 0xdf, 0x71, 0x9f, 0x85, 0x5c, 0x9c, 0x04, 0xd4, 0x9d, 0x2b,
	0xf5, 0xc1, 0x2f, 0x5a, 0xf4, 0xc5, 0x32, 0x69, 0x7e, 0xf2, 0x36, 0xd4, 0x4e, 0xda, 0xdf, 0xb6,
	0x3b, 0xcf, 0xdb, 0xd6, 0x51, 0xd7, 0xec, 0x34, 0xac, 0x67, 0x7b, 0xad, 0x93, 0xba, 0xd5, 0x7f,
	0xd1, 0xad, 0xeb, 0x6f, 0x11, 0x80, 0x42, 0x67, 0xff, 0xb8, 0x7e, 0xd0, 0xd7, 0x33, 0xa4, 0x04,
	0xc5, 0xfd, 0x4e, 0xa7, 0x55, 0xdf, 0x6b, 0xeb, 0x39, 0xb2, 0x00, 0xb9, 0x83, 0xa3, 0x3d, 0x53,
	0xcf, 0x93, 0x45, 0xc8, 0x37, 0x5a, 0x9d, 0xbd, 0xbe, 0x5e, 0x90, 0xe8, 0xc3, 0xce, 0xc9, 0x7e,
	0xab, 0xae, 0x17, 0x25, 0x60, 0xff, 0x45, 0xbf, 0xae, 0x2f, 0x48, 0x40, 0xef, 0xa8, 0x63, 0xf6,
	0xf5, 0x45, 0x52, 0x84, 0x6c, 0xb3, 0xdd, 0xd7, 0x41, 0x7a, 0x5b, 0x9d, 0xf6, 0x53, 0xbd, 0x74,
	0x5a, 0xc0, 0x3f, 0x10, 0xbb, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0x32, 0x4d, 0xba, 0x0c, 0x5d,
	0x0c, 0x00, 0x00,
}
